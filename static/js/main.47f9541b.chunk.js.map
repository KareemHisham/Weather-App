{"version":3,"sources":["Components/Form/Form.js","Components/ListItem/ListItem.js","App.js","serviceWorker.js","index.js"],"names":["Form","handleSubmit","className","onSubmit","type","placeholder","id","ListItem","weather","Fragment","tempreture","city","country","humidity","description","error","role","key","App","state","e","a","preventDefault","target","value","fetch","api","json","data","setState","main","temp","name","sys","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAuBeA,EArBF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACP,OACQ,0BAAQC,UAAU,uBACVC,SAAUF,GAEV,2BAAQG,KAAK,OACLC,YAAY,OACZC,GAAG,OACHJ,UAAU,iBAGlB,2BAAOE,KAAK,OACJC,YAAY,UACZC,GAAG,UACHJ,UAAU,iBAElB,4BAAQA,UAAU,+DAAlB,kBCWTK,EA3BE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACX,OACI,kBAAC,IAAMC,SAAP,KACI,wBAAIP,UAAU,uDAENM,EAAQE,YAAc,4CAAkBF,EAAQE,YAGhDF,EAAQG,MAAQ,sCAAYH,EAAQG,MAGpCH,EAAQI,SAAW,yCAAeJ,EAAQI,SAG1CJ,EAAQK,UAAY,0CAAgBL,EAAQK,UAG5CL,EAAQM,aAAe,6CAAmBN,EAAQM,aAGlDN,EAAQO,OAAS,4BAAI,yBAAKb,UAAU,iCAAiCc,KAAK,SAArD,WACZR,EAAQO,WClBnCE,EAAM,mCAsDGC,E,2MAlDbC,MAAQ,CACNT,WAAY,GACZC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,MAAO,I,EAGTd,a,uCAAe,WAAOmB,GAAP,qBAAAC,EAAA,6DACbD,EAAEE,iBAGIX,EAAOS,EAAEG,OAAOZ,KAAKa,MACrBZ,EAAUQ,EAAEG,OAAOX,QAAQY,MALpB,SAMKC,MAAM,oDAAD,OAAqDd,EAArD,YAA6DC,EAA7D,kBAA8EK,IANxF,cAMPS,EANO,gBAOMA,EAAIC,OAPV,OAOPC,EAPO,OASNjB,GAAQC,EACT,EAAKiB,SAAS,CACZnB,WAAYkB,EAAKE,KAAKC,KACtBpB,KAAMiB,EAAKI,KACXpB,QAASgB,EAAKK,IAAIrB,QAClBC,SAAUe,EAAKE,KAAKjB,SACpBC,YAAac,EAAKpB,QAAQ,GAAGM,YAC7BC,MAAO,KAGT,EAAKc,SAAS,CACZnB,WAAY,GACZC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,MAAO,8BAzBF,4C,8HA8Bb,OACE,yBAAKb,UAAU,kBACb,wBAAIA,UAAU,yBAAd,eACA,kBAAC,EAAD,CAAMD,aAAciC,KAAKjC,eACzB,kBAAC,EAAD,CAAUO,QAAS0B,KAAKf,a,GA7CdgB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.47f9541b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({handleSubmit}) => {\r\n        return (\r\n                <form   className='form-group main-form'\r\n                        onSubmit={handleSubmit}\r\n                >\r\n                        <input  type='text'\r\n                                placeholder='City'\r\n                                id='city'\r\n                                className='form-control'\r\n                        />\r\n\r\n                        <input type='text'\r\n                                placeholder='Country'\r\n                                id='country'\r\n                                className='form-control' \r\n                        />\r\n                        <button className='text-capitalize btn btn-primary d-block m-auto form-control'> get weather</button>\r\n                </form>\r\n        )\r\n        }\r\n\r\nexport default Form","import React from 'react'\r\n\r\nconst ListItem = ({weather}) => {\r\n        return (\r\n            <React.Fragment>\r\n                <ul className='list-unstyled text-capitalize mt-5 pb-5 text-center'>\r\n                    {\r\n                        weather.tempreture && <li>tempreture : {weather.tempreture}</li>\r\n                    }\r\n                    {\r\n                        weather.city && <li>city : {weather.city}</li>\r\n                    }\r\n                    {\r\n                        weather.country && <li>country : {weather.country}</li>\r\n                    }\r\n                    {\r\n                        weather.humidity && <li>humidity : {weather.humidity}</li>\r\n                    }\r\n                    {\r\n                        weather.description && <li>description : {weather.description}</li>\r\n                    }\r\n                    {\r\n                        weather.error && <li><div className=\"alert alert-danger text-center\" role=\"alert\">\r\n                        error : {weather.error}</div></li>\r\n                    }\r\n                </ul>\r\n            </React.Fragment>\r\n        )\r\n    }\r\nexport default ListItem","import React, {Component} from 'react';\n\nimport Form from './Components/Form/Form';\nimport ListItem from './Components/ListItem/ListItem';\n\nconst key = \"aee486591b99b00ee79a83728650a733\";\n\nclass App extends Component {\n\n  state = {\n    tempreture: '',\n    city: '',\n    country: '',\n    humidity: '',\n    description: '',\n    error: ''\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    // const city = e.target.elements.city.value; another way\n    // const country = e.target.elements.country.value; another way\n    const city = e.target.city.value,\n          country = e.target.country.value,\n          api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${key}`),\n          data = await api.json();\n\n        if(city && country) {\n          this.setState({\n            tempreture: data.main.temp,\n            city: data.name,\n            country: data.sys.country,\n            humidity: data.main.humidity,\n            description: data.weather[0].description,\n            error: ''\n          })\n        } else {\n          this.setState({\n            tempreture: '',\n            city: '',\n            country: '',\n            humidity: '',\n            description: '',\n            error: 'Please enter a valid data'\n          })\n        }\n  }\n  render(){\n    return(\n      <div className='container main'>\n        <h1 className='pt-5 mb-5 text-center'>Weather App</h1>\n        <Form handleSubmit={this.handleSubmit}/>\n        <ListItem weather={this.state}/>\n      </div>\n    )\n  } \n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}